package com.jjdx.studentmanage;


import com.jjdx.studentmanage.Util.YamlUtil;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.stage.Stage;

/**
 学生信息管理系统启动类

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/1 <br> */
public class App extends Application {

    @Override
    public void start(Stage stage) throws Exception {
        YamlUtil.start();// 加载配置文件, 若无法加载则报错
        // 启动主界面
        FXMLLoader loader = new FXMLLoader(getClass().getResource("student.fxml"));// 加载UI界面
        Parent root = loader.load();
        Scene scene = new Scene(root);
        stage.requestFocus();// 聚焦窗口
        stage.setTitle("学生信息管理系统");
        stage.setResizable(false);// 不可调整大小
        try {
            Image image = new Image(String.valueOf(getClass().getResource("/com/jjdx/studentmanage/images/Frame/icon.png")));
            stage.getIcons().add(image);
        } catch (Exception e) {
            e.printStackTrace();
        }
        stage.setScene(scene);
        stage.setOnCloseRequest(event -> System.exit(0));// 退出模式
        stage.show();// 显示窗口, 等待用户操作
    }

    public static void main(String[] args) {
        launch(args);
    }
}

package com.jjdx.studentmanage.Controller;

import com.jjdx.studentmanage.Util.AlertUtil;
import com.jjdx.studentmanage.Util.ExcelUtil;
import com.jjdx.studentmanage.pojo.Column;
import com.jjdx.studentmanage.pojo.InfoCounter;
import com.jjdx.studentmanage.pojo.InfoData;
import com.jjdx.studentmanage.pojo.Student;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.scene.control.TableView;
import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.util.HashMap;
import java.util.List;

/**
 统计信息展示页面

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/1 <br> */
public class InfoController {

    public TableView sexTable;
    public TableView ageTable;
    public TableView classTable;
    public TableView outlookTable;
    public TableView deptTable;
    List<String> tableNames;// 表名 & 第一列列名
    List<TableView> tables;// 表对象
    List<InfoCounter.CntFun> cntFuns;// 计数方法

    public void initialize() {
        tableNames = List.of("性别", "年龄", "专业", "班级", "政治面貌");
        tables = List.of(sexTable, ageTable, classTable, outlookTable, deptTable);
        cntFuns = List.of(Student::getSex, s -> s.getAge().toString(), Student::getDept, Student::getClassName, Student::getOutlook);
    }

    /**
     显示表
     */
    public void show(List<Student> students) {
        // 统计信息
        HashMap<TableView, InfoCounter> map = doCount(students);
        // 展示
        for (var entry : map.entrySet()) {
            InfoCounter value = entry.getValue();
            draw(value.getTitle(), entry.getKey(), value.getCntMap());
        }
    }

    /**
     统计信息

     @param students 数据源
     @return 每个表对象各自进行计数, 映射为InfoCounter
     */
    @NotNull
    private HashMap<TableView, InfoCounter> doCount(List<Student> students) {
        HashMap<TableView, InfoCounter> map = new HashMap<>();
        for (int i = 0; i < tables.size(); i++) {
            map.put(tables.get(i), new InfoCounter(tableNames.get(i), cntFuns.get(i)));
        }
        for (var entry : map.entrySet()) {// 计数
            InfoCounter value = entry.getValue();
            for (Student student : students) put(value.getCntMap(), value.getCntMethod().cnt(student));
        }
        return map;
    }

    private void put(HashMap<String, Integer> map, String key) {
        map.put(key, map.getOrDefault(key, 0) + 1);
    }

    private void draw(String tableTitle, TableView table, HashMap<String, Integer> map) {
        // 添加列到表格
        List<Column> dataList = List.of(
                new Column(tableTitle, "kind", 120),
                new Column("人数", "cnt", 100),
                new Column("占比", "ratio", 100));
        dataList.forEach(data -> {
            if (data.isNeedDraw()) table.getColumns().add(data.toColumn());
        });
        // 计算总数
        int total = 0;
        for (var entry : map.entrySet()) total += entry.getValue();
        // 填充表格数据
        ObservableList<InfoData> data = FXCollections.observableArrayList();
        for (var entry : map.entrySet()) {
            int cnt = entry.getValue();
            String radio = cnt * 100 / total + "%";
            data.add(new InfoData(entry.getKey(), cnt, radio));
        }
        // 设置表格数据源
        table.setItems(data);
    }


    /**
     保存5张表信息
     */
    public void save(ActionEvent actionEvent) {
        File choose = AlertUtil.alertDirectorySave();
        int error = 0;
        for (int i = 0; i < tables.size(); i++) {
            try {
                File savePos = new File(choose.getPath() + "/" + tableNames.get(i) + ".xlsx");
                ExcelUtil.save(tables.get(i), savePos, false);
            } catch (Exception e) {
                error++;
            }
        }
        AlertUtil.alertInfo("保存了" + (tables.size() - error) + "张表\n" + "失败了" + error + "张表");
    }
}

package com.jjdx.studentmanage.Controller;

import com.jjdx.studentmanage.DBMS.StudentService;
import com.jjdx.studentmanage.Util.AlertUtil;
import com.jjdx.studentmanage.Util.CheckUtil;
import com.jjdx.studentmanage.pojo.Student;
import javafx.event.ActionEvent;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextField;

import java.time.LocalDate;

import static com.jjdx.studentmanage.Util.StageUtil.addTip;

/**
 插入学生信息表单

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/1 <br> */
public class InsertController {
    public TextField id;
    public TextField name;
    public TextField dept;
    public TextField className;
    public TextField age;
    public ChoiceBox<Integer> sex;
    public DatePicker birthday;
    public ChoiceBox<String> outlook;
    public TextField nativePlace;
    public TextField address;
    public TextField phone;
    public TextField email;

    public void initialize() {
        addTip(id, "10位数字");
        addTip(name, "2~4个中文字符");
        addTip(dept, "2~10个中文字符");
        addTip(className, "专业+xxx班");
        addTip(age, "0~100");
        addTip(nativePlace, "2~10个中文字符");
        addTip(address, "2~50个合法字符");
        addTip(phone, "以1开始的11位数字");
        addTip(email, "合法的邮箱地址");
    }


    /**
     插入学生记录
     */
    public void insert(ActionEvent actionEvent) {
        Student student = getInfo();
        String result = StudentService.insert(student);
        if (result == null) {
            AlertUtil.alertInfo("插入成功", "hideAlert.hideInsert");
        } else {
            AlertUtil.alertError(result, "hideAlert.hideInsert");
        }
    }


    /**
     获取表单信息, 生成Student对象
     */
    private Student getInfo() {
        String studentId = id.getText(),
                studentName = name.getText(),
                studentNativePlace = nativePlace.getText(),
                studentAddress = address.getText(),
                studentPhone = phone.getText(),
                studentEmail = email.getText(),
                studentDept = dept.getText(),
                studentClassName = className.getText(),
                studentOutlook = outlook.getValue(),
                studentSex = null;
        Integer studentAge = null;
        LocalDate studentBirthday = birthday.getValue();
        String ageText = age.getText();
        if (CheckUtil.notNull(ageText)) studentAge = Integer.parseInt(ageText);
        if (CheckUtil.notNull(sex.getValue())) studentSex = sex.getValue().toString();
        return new Student(studentId, studentName, studentDept, studentClassName, studentAge, studentSex,
                studentAddress, studentOutlook, studentBirthday, studentNativePlace, studentPhone, studentEmail);
    }

    /**
     清空表单
     */
    public void clear(ActionEvent actionEvent) {
        id.clear();
        name.clear();
        dept.clear();
        className.clear();
        age.clear();
        birthday.setValue(null);
        sex.setValue(null);
        nativePlace.clear();
        address.clear();
        phone.clear();
        email.clear();
        outlook.setValue(null);
    }
}

package com.jjdx.studentmanage.Controller;

import com.jjdx.studentmanage.DBMS.StudentService;
import com.jjdx.studentmanage.Util.AlertUtil;
import com.jjdx.studentmanage.Util.CheckUtil;
import com.jjdx.studentmanage.pojo.SelectCondition;
import com.jjdx.studentmanage.pojo.Student;
import javafx.event.ActionEvent;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextField;

import java.time.LocalDate;
import java.util.List;

import static com.jjdx.studentmanage.Util.StageUtil.addTip;


/**
 查询控制台

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/1 <br> */
public class SelectController {

    public TextField id;
    public TextField name;
    public TextField dept;
    public TextField className;
    public TextField age_start, age_end;
    public ChoiceBox<String> sex;
    public DatePicker birthday_start, birthday_end;
    public ChoiceBox<String> outlook;
    public TextField nativePlace;
    public TextField address;
    public TextField phone;
    public TextField email;

    public void initialize() {
        addTip(id, "10位数字");
        addTip(name, "2~4个中文字符");
        addTip(dept, "2~10个中文字符");
        addTip(className, "专业+xxx班");
        addTip(age_start, ">0");
        addTip(age_end, "<100");
        addTip(nativePlace, "2~10个中文字符");
        addTip(address, "2~50个合法字符");
        addTip(phone, "以1开始的11位数字");
        addTip(email, "用户名@域名");
    }

    /**
     按表单查询学生
     */
    public void query(ActionEvent actionEvent) {
        SelectCondition condition = getInfo();
        try {
            List<Student> result = StudentService.queryStudents(condition);
            studentController.setData(result);
            AlertUtil.alertInfo("查询成功", "hideAlert.hideSelect");
        } catch (CheckUtil.DataIllegalException e) {
            AlertUtil.alertError(e.getMessage(), "hideAlert.hideSelect");
        }
    }

    /**
     获取查询条件, 集成为SelectCondition返回
     */
    private SelectCondition getInfo() {
        String studentId = id.getText(), studentName = name.getText(),
                studentNativePlace = nativePlace.getText(), studentDept = dept.getText(),
                studentClass = className.getText(), studentSex = sex.getValue(),
                studentPhone = phone.getText(), studentEmail = email.getText(),
                studentOutlook = outlook.getValue(), studentAddress = address.getText();

        LocalDate studentStartBirthday = birthday_start.getValue(), studentEndBirthday = birthday_end.getValue();

        Integer studentStartAge = null, studentEndAge = null;
        String age = age_start.getText();
        if (CheckUtil.isValidAge(age)) studentStartAge = Integer.parseInt(age);
        age = age_end.getText();
        if (CheckUtil.isValidAge(age)) studentEndAge = Integer.parseInt(age);

        return new SelectCondition(studentId, studentName, studentDept, studentClass, studentStartAge, studentEndAge, studentSex,
                studentStartBirthday, studentEndBirthday, studentOutlook, studentNativePlace,
                studentAddress, studentPhone, studentEmail);
    }


    /**
     清空查询条件
     */
    public void clear(ActionEvent actionEvent) {
        id.clear();
        name.clear();
        nativePlace.clear();
        birthday_start.setValue(null);
        birthday_end.setValue(null);
        age_start.clear();
        age_end.clear();
        dept.clear();
        className.clear();
        sex.setValue(null);
    }

    StudentController studentController;

    /**
     数据回调(查询的学生信息需要显示到StudentController里)
     */
    public void setDataCallback(StudentController studentController) {
        this.studentController = studentController;
    }
}

package com.jjdx.studentmanage.Controller;

import com.jjdx.studentmanage.Util.AlertUtil;
import com.jjdx.studentmanage.Util.YamlUtil;
import com.jjdx.studentmanage.pojo.Column;
import javafx.event.Event;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

import java.util.*;

import static com.jjdx.studentmanage.Util.StageUtil.createTransparentButton;

/**
 设置页面

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/3 <br> */
public class SettingController {

    public CheckBox hideSelect;
    public CheckBox hideInsert;
    public CheckBox hideUpdate;
    public ChoiceBox<String> selectLevel;
    public TextField id;
    public VBox widthControllerBox;
    Image yes, no;

    {
        yes = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/com/jjdx/studentmanage/images/Content/commit.png")));
        no = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/com/jjdx/studentmanage/images/Content/cancel.png")));
    }

    public void initialize() {
        // 弹窗控制
        hideSelect.setSelected(YamlUtil.getBoolean("hideAlert.hideSelect"));
        hideInsert.setSelected(YamlUtil.getBoolean("hideAlert.hideInsert"));
        hideUpdate.setSelected(YamlUtil.getBoolean("hideAlert.hideUpdate"));
        selectLevel.setValue(YamlUtil.getString("hideAlert.level"));

        // 宽度控制
        List<Column> columns = new ArrayList<>();
        HashMap<String, Object> fieldMap = YamlUtil.getLastMap("tableView.columns");// 字段名 -> 数据对
        if (fieldMap == null) {
            throw new RuntimeException(" tableView.columns - 配置错误 ");
        }
        fieldMap.forEach((key, value) -> {
            HashMap<String, Object> map = (HashMap<String, Object>) value;
            Column column = new Column(key, (String) map.get("attribute"), (Integer) map.get("prefWidth"), (Integer) map.get("priority"));
            columns.add(column);
        });
        columns.sort(Comparator.comparingInt(o -> o.priority));
        for (Column column : columns) {
            addLine(column);
        }
    }

    private void addLine(Column column) {
        HBox hBox = new HBox();
        hBox.setSpacing(5);
        hBox.setPrefWidth(400);
        String name = column.getTitle();// 字段名
        //String attribute = column.getAttribute();// 属性名
        Label label = new Label(name + ":");
        label.setPrefWidth(80);
        TextField textField = new TextField(column.getPrefWidth() + ""); // 学号: 100
        textField.setPrefWidth(80);

        Button commit = createTransparentButton(20, 20, yes, "提交"),
                cancel = createTransparentButton(20, 20, no, "取消");
        textField.textProperty().addListener((observable, oldValue, newValue) -> {
            commit.setOpacity(1);
            cancel.setOpacity(1);
        });
        commit.addEventHandler(MouseEvent.MOUSE_CLICKED, (e) -> {
            if (commit.getOpacity() == 0) return;
            commit(name + ".prefWidth", textField);
            commit.setOpacity(0);
            cancel.setOpacity(0);
        });
        cancel.addEventHandler(MouseEvent.MOUSE_CLICKED, (e) -> {
            if (cancel.getOpacity() == 0) return;
            cancel(name + ".prefWidth", textField);
            commit.setOpacity(0);
            cancel.setOpacity(0);
        });
        hBox.getChildren().addAll(label, textField, commit, cancel);
        widthControllerBox.getChildren().add(hBox);
    }


    public void selectChange(MouseEvent actionEvent) {
        YamlUtil.change("hideAlert.hideSelect", hideSelect.isSelected());
    }

    public void insertChange(MouseEvent actionEvent) {
        YamlUtil.change("hideAlert.hideInsert", hideInsert.isSelected());
    }

    public void updateChange(MouseEvent actionEvent) {
        YamlUtil.change("hideAlert.hideUpdate", hideUpdate.isSelected());
    }

    public void levelChange(Event actionEvent) {
        YamlUtil.change("hideAlert.level", selectLevel.getValue());
    }

    /**
     将textField的信息提交到配置文件

     @param key       配置键名
     @param textField 要提交的TextField对象
     */
    public void commit(String key, TextField textField) {
        int width;
        try {
            width = Integer.parseInt(textField.getText().trim());
        } catch (Exception e) {
            AlertUtil.alertWarning("请输入有效值");
            return;
        }
        YamlUtil.change("tableView.columns." + key, width);
        AlertUtil.alertInfo("设置成功");
    }

    /**
     将配置项信息还原到textField

     @param key       配置键名
     @param textField 要提交的TextField对象
     */
    public void cancel(String key, TextField textField) {
        int width = YamlUtil.getInt("tableView.columns." + key);
        textField.setText(width + "");
    }
}

package com.jjdx.studentmanage.Controller;

import com.jjdx.studentmanage.DBMS.StudentService;
import com.jjdx.studentmanage.Util.*;
import com.jjdx.studentmanage.pojo.Column;
import com.jjdx.studentmanage.pojo.Student;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;


/**
 主页面学生信息管理

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/1 <br> */
public class StudentController {
    public CheckBox checkId;
    public CheckBox checkName;
    public CheckBox checkDept;
    public CheckBox checkClassName;
    public CheckBox checkAge;
    public CheckBox checkSex;
    public CheckBox checkNativePlace;
    public CheckBox checkEmail;
    public CheckBox checkBirthday;
    public CheckBox checkOutlook;
    public CheckBox checkAddress;
    public CheckBox checkPhone;

    public TableView tableView;
    public AnchorPane root;


    List<Student> studentData;// 学生数据


    /**
     初始化
     */
    @FXML
    public void initialize() {
        setData(StudentService.findAllStudent()); // 设置表格初始值
        StageUtil.initFocus(root, Button.class, CheckBox.class); // 设置焦点
    }

    /**
     获取列数据
     */
    private List<Column> getColumnList() {
        List<Column> dataList = new ArrayList<>();
        List<CheckBox> checkBoxes = List.of(checkId, checkName, checkDept, checkClassName, checkAge, checkSex,
                checkNativePlace, checkBirthday, checkOutlook, checkAddress, checkPhone, checkEmail);// 勾选框
        HashMap<String, Object> fieldMap = YamlUtil.getLastMap("tableView.columns");// 字段名 -> 数据对
        for (CheckBox checkBox : checkBoxes) {
            String name = checkBox.getText();// 列字段名
            HashMap<String, Object> map = (HashMap<String, Object>) fieldMap.get(name);// 获取该字段的数据对
            String attribute = (String) map.get("attribute");// 对应的属性
            Integer prefWidth = (Integer) map.get("prefWidth");// 列宽
            Integer priority = (Integer) map.get("priority");// 优先级
            boolean selected = checkBox.isSelected();// 是否绘制
            dataList.add(new Column(name, attribute, prefWidth, priority, selected));
        }
        return dataList;
    }


    /**
     设置表格数据

     @param studentData 要展示的学生数据
     */
    public void setData(List<Student> studentData) {
        // 清空数据
        tableView.getColumns().clear();
        tableView.getItems().clear();
        // 获取数据
        this.studentData = studentData;//studentData维护当前展示的学生数据
        List<Column> columnData = getColumnList();// 获取列数据
        // 创建列并设置列名
        // 序号列
        TableColumn<Student, Integer> indexColumn = new TableColumn<>("");
        indexColumn.setMinWidth(60);
        indexColumn.setCellValueFactory(param -> {
            int value = tableView.getItems().indexOf(param.getValue()) + 1;// 序号
            return new SimpleIntegerProperty(value).asObject();
        });
        tableView.getColumns().add(indexColumn);
        // 数据列
        for (Column data : columnData) {
            if (!data.needDraw) continue;// 不需要绘制
            TableColumn<Student, Integer> c = new TableColumn<>(data.title);// 列字段名
            c.setCellValueFactory(new PropertyValueFactory<>(data.attribute));// 列属性名
            c.setPrefWidth(data.prefWidth);// 列宽
            tableView.getColumns().add(c);
        }
        // 填充数据到表格视图
        tableView.getItems().addAll(studentData);
    }

    /**
     列选择触发, 重设表格列
     */
    public void chooseColumn(ActionEvent actionEvent) {
        setData(studentData);
    }

    /**
     刷新记录
     */
    public void refresh(ActionEvent actionEvent) {
        setData(StudentService.findAllStudent());
    }

    // -------------------------新页面--------------------------------
    Stage selectStage = new Stage();
    Stage insertStage = new Stage();
    Stage updatepStage = new Stage();
    Stage settingStage = new Stage();

    /**
     弹出查询控制台, 选定查询条件
     */
    public void select(ActionEvent actionEvent) throws IOException {
        FXMLLoader loader = StageUtil.loadStage(getClass(), "select.fxml", selectStage,
                "查询控制台", "/com/jjdx/studentmanage/images/Frame/select.png");
        //设置回调, select出的数据需要回到主界面
        if (loader != null) ((SelectController) loader.getController()).setDataCallback(this);
    }

    /**
     弹出表单, 录入学生信息
     */
    public void insert(ActionEvent actionEvent) throws IOException {
        StageUtil.loadStage(getClass(), "insert.fxml", insertStage, "录入", "/com/jjdx/studentmanage/images/Frame/insert.png");
    }

    /**
     弹出更新页面, 更新学生信息
     */
    public void update(ActionEvent actionEvent) throws IOException {
        StageUtil.loadStage(getClass(), "update.fxml", updatepStage, "更新", "/com/jjdx/studentmanage/images/Frame/update.png");
    }

    /**
     删除页面, 只有按学号删除以单个输入框的形式弹出
     */
    public void delete(ActionEvent actionEvent) {
        // 弹出输入框
        String id = AlertUtil.alertInput("请输入要删除的学生学号");
        // 检查输入学号合法性
        if (!CheckUtil.isValidId(id)) {
            AlertUtil.alertWarning("学号不合法");
            return;
        }
        if (!CheckUtil.isExistId(id)) {
            AlertUtil.alertWarning("学号不存在");
            return;
        }
        // 由于是删除操作, 所有弹出确认框
        ButtonType buttonType = AlertUtil.alertChoose("确认删除学生(" + id + ")吗?").getResult();
        if (buttonType != ButtonType.OK) return;
        try {
            StudentService.delete(id);
            AlertUtil.alertInfo("删除成功");
        } catch (Exception e) {
            AlertUtil.alertInfo("删除失败");
        }
    }

    /**
     统计信息页面
     */
    public void info(ActionEvent actionEvent) throws IOException {
        FXMLLoader loader = StageUtil.loadStage(getClass(), "info.fxml", new Stage(), "信息统计", "/com/jjdx/studentmanage/images/Frame/info.png");
        assert loader != null;// new Stage().isShowing() = false
        ((InfoController) loader.getController()).show(studentData);
    }

    /**
     设置页面
     */
    public void setting(ActionEvent actionEvent) throws IOException {
        StageUtil.loadStage(getClass(), "setting.fxml", settingStage, "设置", "/com/jjdx/studentmanage/images/Frame/setting.png");
    }

    // ----------------------------------文件交互-----------------------------------------

    /**
     将TableView导出到excel
     */
    public void convertToExcel(ActionEvent actionEvent) {
        File file = AlertUtil.alertDirectorySave();
        if (file == null) return;
        try {
            File savePos = new File(file.getPath() + "/" + "学生信息表.xlsx");
            ExcelUtil.save(tableView, savePos, true);
            AlertUtil.alertInfo("保存成功");
        } catch (Exception e) {
            AlertUtil.alertError("保存失败");
        }
    }


    /**
     批量导入学生数据
     */
    public void insertByExcel(ActionEvent actionEvent) {
        File file = AlertUtil.alertExcelScan();
        if (file == null) return;
        if (!file.getName().endsWith(".xlsx")) {
            AlertUtil.alertError("不支持的文件类型");
            return;
        }
        try {
            List<Student> studentList = ExcelUtil.loadInfo(file);
            int[] cnt = StudentService.insert(studentList);
            AlertUtil.alertInfo("成功插入了" + cnt[0] + "条数据, 失败" + cnt[1] + "条");
        } catch (Exception e) {
            AlertUtil.alertError("导入失败");
        }
    }

}

package com.jjdx.studentmanage.Controller;

import com.jjdx.studentmanage.DBMS.StudentService;
import com.jjdx.studentmanage.Util.AlertUtil;
import com.jjdx.studentmanage.Util.CheckUtil;
import com.jjdx.studentmanage.pojo.Student;
import javafx.event.ActionEvent;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;

import java.time.LocalDate;

import static com.jjdx.studentmanage.Util.StageUtil.addTip;

/**
 更新页面

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/2 <br> */
public class UpdateController {
    public TextField id;
    public TextField name;
    public TextField dept;
    public TextField className;
    public TextField age;
    public DatePicker birthday;
    public ChoiceBox<String> sex;
    public TextField nativePlace;
    public ComboBox outlook;
    public TextField address;
    public TextField phone;
    public TextField email;
    public AnchorPane root;

    public void initialize() {
        addTip(id, "10位数字");
        addTip(name, "2~4个中文字符");
        addTip(dept, "2~10个中文字符");
        addTip(className, "专业+xxx班");
        addTip(age, "0~100");
        addTip(nativePlace, "2~10个中文字符");
        addTip(address, "2~50个合法字符");
        addTip(phone, "以1开始的11位数字");
        addTip(email, "用户名@域名");
    }

    /**
     按学号更新学生记录
     */
    public void update(ActionEvent actionEvent) {
        Student student = getInfo();
        String valid = CheckUtil.studentUpdateValid(student);
        if (valid != null) {
            AlertUtil.alertError(valid, "hideAlert.hideUpdate");
            return;
        }
        StudentService.update(student);
        AlertUtil.alertInfo("更新成功","hideAlert.hideUpdate");
    }


    /**
     获取表单信息, 生成Student对象
     */
    private Student getInfo() {
        String studentId = id.getText(),
                studentName = name.getText(),
                studentNativePlace = nativePlace.getText(),
                studentAddress = address.getText(),
                studentPhone = phone.getText(),
                studentEmail = email.getText(),
                studentDept = dept.getText(),
                studentClassName = className.getText(),
                studentSex = null, studentOutlook = null;
        Integer studentAge = null;
        LocalDate studentBirthday = birthday.getValue();

        String ageText = age.getText();
        if (CheckUtil.notNull(ageText)) studentAge = Integer.parseInt(ageText);

        Object value = sex.getValue();
        if (value != null) studentSex = value.toString();
        value = outlook.getValue();
        if (value != null) studentOutlook = value.toString();

        return new Student(studentId, studentName, studentDept, studentClassName, studentAge, studentSex,
                studentAddress, studentOutlook, studentBirthday, studentNativePlace, studentPhone, studentEmail);
    }

    /**
     清空表单
     */
    public void clear(ActionEvent actionEvent) {
        id.clear();
        name.clear();
        dept.clear();
        className.clear();
        age.clear();
        birthday.setValue(null);
        sex.setValue(null);
        nativePlace.clear();
        address.clear();
        phone.clear();
        email.clear();
        outlook.setValue(null);
    }
}

package com.jjdx.studentmanage.DBMS;

import com.jjdx.studentmanage.pojo.SelectCondition;
import com.jjdx.studentmanage.pojo.Student;

import java.util.List;

/**
 学生信息数据交互

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/1 <br> */
public interface StudentMapper {

    List<Student> findAllStudent();

    List<Student> queryStudents(SelectCondition condition);

    void insert(Student student);

    void update(Student student);

    void delete(String id);
}

package com.jjdx.studentmanage.DBMS;

import com.jjdx.studentmanage.Util.CheckUtil;
import com.jjdx.studentmanage.pojo.SelectCondition;
import com.jjdx.studentmanage.pojo.Student;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.Reader;
import java.util.List;

/**
 学生服务类

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/1 <br> */
public class StudentService {
    public static SqlSession sqlSession;// 数据库会话
    public static StudentMapper studentMapper;// 数据库交互接口

    static {
        try {
            Reader reader = Resources.getResourceAsReader("mybatis-config.xml");// 加载mybatis配置文件
            sqlSession = new SqlSessionFactoryBuilder().build(reader).openSession();// 开启数据库会话
            studentMapper = sqlSession.getMapper(StudentMapper.class);// 注册Mapper接口
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("未成功开启数据库会话", e);
        }
    }

    /**
     事务提交
     */
    public static void commit() {
        sqlSession.commit();
    }

    /**
     更新学生信息
     */
    public static void update(Student student) {
        studentMapper.update(student);
        commit();
    }

    /**
     查询所有学生
     */
    public static List<Student> findAllStudent() {
        return studentMapper.findAllStudent();
    }

    /**
     查询学生
     */
    public static List<Student> queryStudents(SelectCondition condition) throws CheckUtil.DataIllegalException {
        String info = CheckUtil.conditionValidInfo(condition);
        if (info != null) {
            throw new CheckUtil.DataIllegalException(info);
        }
        return studentMapper.queryStudents(condition);
    }

    /**
     插入学生

     @param student 学生信息
     @return 插入结果, null为插入成功
     */
    public static String insert(Student student) {
        String valid = CheckUtil.studentInsertValid(student);
        if (valid != null) return valid;
        try {
            studentMapper.insert(student);
            commit();
            return null;
        } catch (Exception e) {
            return "插入失败";
        }
    }

    /**
     插入学生

     @param studentList 学生信息列表
     @return 插入结果[成功数量, 失败数量]
     */
    public static int[] insert(List<Student> studentList) {
        int no = 0;
        for (Student student : studentList) {
            String result = insert(student);
            if (result != null) no++;
        }
        return new int[]{studentList.size() - no, no};
    }


    /**
     删除学生信息
     */
    public static void delete(String id) {
        studentMapper.delete(id);
        commit();
    }
}

package com.jjdx.studentmanage.pojo;

import javafx.scene.control.TableColumn;
import javafx.scene.control.cell.PropertyValueFactory;
import lombok.Data;

/**
 表示表的绘制信息

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/1 <br> */
@Data
public class Column {
    /**
     数据列字段名
     */
    public String title;
    /**
     数据列对应的类属性名
     */
    public String attribute;
    /**
     绘制优先级
     */
    public Integer priority;
    /**
     列宽
     */
    public Integer prefWidth;
    /**
     是否绘制该列
     */
    public boolean needDraw = true;

    public Column(String title, String attribute, Integer prefWidth, Integer priority, boolean needDraw) {
        this.title = title;
        this.attribute = attribute;
        this.needDraw = needDraw;
        this.priority = priority;
        this.prefWidth = prefWidth;
    }

    public Column(String title, String attribute, Integer prefWidth, Integer priority) {
        this.title = title;
        this.attribute = attribute;
        this.priority = priority;
        this.prefWidth = prefWidth;
    }

    public Column(String title, String attribute, Integer prefWidth) {
        this.title = title;
        this.attribute = attribute;
        this.prefWidth = prefWidth;
    }

    public TableColumn toColumn() {
        TableColumn tableColumn = new TableColumn(title);
        tableColumn.setPrefWidth(prefWidth);
        tableColumn.setCellValueFactory(new PropertyValueFactory<>(attribute));
        return tableColumn;
    }
}

package com.jjdx.studentmanage.pojo;

import lombok.Data;

import java.util.HashMap;

/**
 信息数据, 表示列信息, 用于统计

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/2 <br> */
@Data
public class InfoCounter {
    String title;// 列名, 如:性别
    CntFun cntMethod;// 统计方法
    HashMap<String, Integer> cntMap = new HashMap<>();// 统计表

    /**
     统计方法接口
     */
    public interface CntFun {
        String cnt(Student s);
    }

    public InfoCounter(String title, CntFun f) {
        this.title = title;
        this.cntMethod = f;
    }
}

package com.jjdx.studentmanage.pojo;

import lombok.Data;

/**
 信息数据, 表示行信息

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/2 <br> */
@Data
public class InfoData {
    public String kind;// 该列的信息项, 如:男、女
    public int cnt;// 统计
    public String ratio;// 信息项在该类信息中的占比

    public InfoData(String key, int cnt, String ratio) {
        this.kind = key;
        this.cnt = cnt;
        this.ratio = ratio;
    }
}

package com.jjdx.studentmanage.pojo;

import lombok.Data;

import java.time.LocalDate;

/**
 查询条件

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/1 <br> */
@Data
public class SelectCondition {
    String id;
    String name;
    String dept;
    String className;
    Integer startAge, endAge;
    String sex;
    LocalDate startBirthday, endBirthday;
    String outlook;
    String nativePlace;
    String address;
    String phone;
    String email;

    public SelectCondition(String id, String name, String dept, String className,
                           Integer startAge, Integer endAge, String sex, LocalDate startBirthday, LocalDate endBirthday, String outlook, String nativePlace,
                           String address, String phone, String email) {
        this.id = id;
        this.name = name;
        this.dept = dept;
        this.className = className;
        this.sex = sex;
        this.nativePlace = nativePlace;
        this.startBirthday = startBirthday;
        this.endBirthday = endBirthday;
        this.startAge = startAge;
        this.endAge = endAge;
        this.outlook = outlook;
        this.phone = phone;
        this.email = email;
        this.address = address;
    }


}

package com.jjdx.studentmanage.pojo;

import lombok.Data;

import java.time.LocalDate;

/**
 学生类

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/1 <br> */
@Data
public class Student {
    String id; // 学号
    String name; // 姓名
    String dept; // 专业
    String className; // 班级
    Integer age; // 年龄
    String sex; // 性别
    String nativePlace; // 籍贯
    String email; // 邮箱
    LocalDate birthday; // 出生年月
    String outlook; // 政治面貌
    String address; // 家庭住址
    String phone; // 电话号码

    public Student() {}

    public Student(String id, String name, String dept, String className, Integer age, String sex, String nativePlace, String email, LocalDate birthday, String outlook, String address, String phone) {
        this.id = id;
        this.name = name;
        this.dept = dept;
        this.className = className;
        this.age = age;
        this.sex = sex;
        this.birthday = birthday;
        this.outlook = outlook;
        this.nativePlace = nativePlace;
        this.address = address;
        this.phone = phone;
        this.email = email;
    }

}

package com.jjdx.studentmanage.Util;

import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.DialogPane;
import javafx.scene.control.TextInputDialog;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.stage.Window;

import java.io.File;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.function.BiFunction;
import java.util.logging.Level;

/**
 弹窗工具

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/2 <br> */
public class AlertUtil {
    static HashMap<String, Image> imageMap = new HashMap<>();

    static {
        List<String> imageNames = List.of("yes", "warning", "no", "graphic", "input");
        String pre = "/com/jjdx/studentmanage/images/Alert/";
        for (String imageName : imageNames) {
            try {
                URL url = AlertUtil.class.getResource(pre + imageName + ".png");
                Image image = new Image(String.valueOf(url));
                imageMap.put(imageName, image);
            } catch (Exception ignored) {
            }
        }
    }

/**
 显示弹窗
 - 底层代码, 弹窗从此处统一生成

 @param type    弹窗类型
 @param message 弹窗内容
 @param icon    图标
 */
public static Alert alert(Alert.AlertType type, String message, Image icon) {
    Alert alert = new Alert(type, message, ButtonType.OK);
    alert.setHeaderText("操作提示");
    ImageView imageView = new ImageView(imageMap.get("graphic"));
    imageView.setFitWidth(50);
    imageView.setFitHeight(50);
    alert.setGraphic(imageView);
    DialogPane dialogPane = alert.getDialogPane();
    dialogPane.setStyle("-fx-font-size: 20;-fx-font-weight: bold;-fx-font-family: SimSun-ExtB;");
    dialogPane.setPrefSize(400, 200);
    Stage stage = (Stage) dialogPane.getScene().getWindow();
    try {stage.getIcons().add(icon);} catch (Exception ignored) {}
    stage.setTitle("提示");
    alert.showAndWait();
    return alert;
}

/**
 弹窗级别:
 info: 显示[错误,警告,信息]弹窗
 warning: 显示[错误,警告]弹窗
 error: 显示[错误]弹窗
 null: 无弹窗

 @param alertLevel 现在要弹出的弹窗级别
 @return 是否能弹出
 */
public static boolean checkLevel(Level alertLevel) {
    String level = YamlUtil.getString("hideAlert.level");// 配置文件的级别
    if (CheckUtil.notNull(level)) return true;//无配置信息
    if (alertLevel.equals(Level.OFF)) {// error: 为NULL时不能弹出
        return !CheckUtil.exist(level, "NULL");
    } else if (alertLevel.equals(Level.WARNING)) {// warning: 为NULL和ERROR时不能弹出
        return !CheckUtil.exist(level, "NULL", "ERROR");
    } else if (alertLevel.equals(Level.INFO)) {// info: 为NULL,ERROR,WARNING时不能弹出
        return !CheckUtil.exist(level, "NULL", "ERROR", "WARNING");
    }
    // 能弹出
    return true;
}

public static Alert alertInfo(String message) {
    if (!checkLevel(Level.INFO)) return null;
    return alert(Alert.AlertType.INFORMATION, message, imageMap.get("yes"));
}

public static Alert alertWarning(String message) {
    if (!checkLevel(Level.WARNING)) return null;
    return alert(Alert.AlertType.WARNING, message, imageMap.get("warning"));
}

public static Alert alertError(String message) {
    if (!checkLevel(Level.OFF)) return null;
    return alert(Alert.AlertType.ERROR, message, imageMap.get("no"));
}

    public static Alert alertInfo(String message, String isHideConfig) {
        if (YamlUtil.getBoolean(isHideConfig)) return null;
        return alertInfo(message);
    }

    public static Alert alertWarning(String message, String isHideConfig) {
        if (YamlUtil.getBoolean(isHideConfig)) return null;
        return alertWarning(message);
    }

    public static Alert alertError(String message, String config) {
        if (YamlUtil.getBoolean(config)) return null;
        return alertError(message);
    }

    /**
     选择文件

     @param title    弹窗标题
     @param function 弹窗类型, 导出 or 导入
     */
    public static File alertFileChoose(String title, Window window, BiFunction<FileChooser, Window, File> function, FileChooser.ExtensionFilter filter) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle(title);
        fileChooser.getExtensionFilters().addAll(filter);
        return function.apply(fileChooser, window);
    }

    /**
     选择文件夹
     */
    public static File alertDirectorySave() {
        DirectoryChooser directoryChooser = new DirectoryChooser();
        directoryChooser.setTitle("保存文件");
        return directoryChooser.showDialog(null);   // 仅选择文件夹
    }

    /**
     选择Excel文件
     */
    public static File alertExcelScan() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("选择文件");
        fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter("Excel Files", "*.xlsx"));
        return fileChooser.showOpenDialog(null);
    }

    /**
     弹出输入框
     */
    public static String alertInput(String text) {
        TextInputDialog textInputDialog = new TextInputDialog();
        textInputDialog.setTitle("删除");
        textInputDialog.setGraphic(null);
        textInputDialog.setHeaderText(null);
        textInputDialog.setContentText(text);
        Stage stage = (Stage) textInputDialog.getDialogPane().getScene().getWindow();
        try {stage.getIcons().add(imageMap.get("input"));} catch (Exception ignored) {}
        return textInputDialog.getResult();
    }

    /**
     弹出确认框
     */
    public static Alert alertChoose(String text) {
        Alert alert = alertWarning(text);
        alert.getButtonTypes().setAll(ButtonType.OK, ButtonType.CANCEL);
        return alert;
    }
}

package com.jjdx.studentmanage.Util;

import com.jjdx.studentmanage.DBMS.StudentService;
import com.jjdx.studentmanage.pojo.SelectCondition;
import com.jjdx.studentmanage.pojo.Student;

import java.time.LocalDate;

/**
 约束检查工具

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/2 <br> */
public class CheckUtil {
  public   static class DataIllegalException extends RuntimeException {
        public DataIllegalException(String message) {
            super(message);
        }
    }

    /**
     判断非空对象
     - 特别的: 如果是String, 空格组成的也视为空
     */
    public static boolean notNull(Object obj) {
        return !isNull(obj);
    }

    /**
     判断空对象
     - 特别的: 如果是String, 空格组成的也视为空
     */
    public static boolean isNull(Object obj) {
        if (obj == null) return true;
        if (obj instanceof String) {
            return ((String) obj).trim().isEmpty();
        }
        return false;
    }

    /**
     存在性判别, obj是否存在于给定的os列表中
     */
    public static boolean exist(Object obj, Object... os) {
        for (Object o : os) {
            if (o.equals(obj)) return true;
        }
        return false;
    }

    /**
     检查输入的查询条件是否合法
     - 所有属性均可为null

     @return 返回非法信息, 返回值为null表示合法
     */
    public static String conditionValidInfo(SelectCondition s) {
        if (notNull(s.getId()) && !isValidId(s.getId())) {
            return "学号不合法";
        }
        if (notNull(s.getName()) && !isValidName(s.getName())) {
            return "姓名不合法";
        }
        if (notNull(s.getDept()) && !isValidDept(s.getDept())) {
            return "专业不合法";
        }
        if (notNull(s.getClassName())) {
            if (!isValidClassName(s.getClassName())) return "班级不合法";
            if (isNull(s.getDept())) return "需填写专业";
            if (!s.getClassName().startsWith(s.getDept())) return "专业不匹配";
        }
        if (notNull(s.getStartAge()) && notNull(s.getEndAge()) && s.getStartAge() >= s.getEndAge()) {
            return "年龄范围不合法";
        }
        if (notNull(s.getSex()) && !isValidSex(s.getSex())) {
            return "性别不合法";
        }
        if (notNull(s.getNativePlace()) && !isValidNativePlace(s.getNativePlace())) {
            return "籍贯不合法";
        }
        if (notNull(s.getEmail()) && !isValidEmail(s.getEmail())) {
            return "邮箱不合法";
        }
        if (notNull(s.getStartBirthday()) && notNull(s.getEndBirthday())) {
            if (s.getStartBirthday().isAfter(s.getEndBirthday())) return "出生日期范围不合法";
        }
        if (notNull(s.getOutlook()) && !isValidOutlook(s.getOutlook())) {
            return "政治面貌不合法";
        }
        if (notNull(s.getAddress()) && !isValidAddress(s.getAddress())) {
            return "家庭住址不合法";
        }
        if (notNull(s.getPhone()) && !isValidPhone(s.getPhone())) {
            return "电话号码不合法";
        }
        return null;
    }

    /**
     判断学生记录是否能插入
     - 学号和姓名非空, 学号唯一, 其余项可为空

     @return 非法信息, 如果合法返回null
     */
    public static String studentInsertValid(Student s) {
        if (isNull(s.getId())) {
            return "学号不能为空";
        }
        if (!isValidId(s.getId())) {
            return "学号不合法";
        }
        if (isExistId(s.getId())) {
            return "学号已存在";
        }
        if (isNull(s.getName())) {
            return "姓名不能为空";
        }
        if (!isValidName(s.getName())) {
            return "姓名不合法";
        }
        if (notNull(s.getDept()) && !isValidDept(s.getDept())) {
            return "专业不合法";
        }
        if (notNull(s.getClassName())) {
            if (!isValidClassName(s.getClassName())) return "班级不合法";
            if (!notNull(s.getDept())) return "需填写专业";
            if (!s.getClassName().startsWith(s.getDept())) return "专业不匹配";
        }
        if (notNull(s.getAge()) && !isValidAge(s.getAge())) {
            return "年龄不合法";
        }
        if (notNull(s.getSex()) && !isValidSex(s.getSex())) {
            return "性别不合法";
        }
        if (notNull(s.getNativePlace()) && !isValidNativePlace(s.getNativePlace())) {
            return "籍贯不合法";
        }
        if (notNull(s.getEmail()) && !isValidEmail(s.getEmail())) {
            return "邮箱不合法";
        }
        if (notNull(s.getBirthday())) {
            if (!isValidBirthday(s.getBirthday())) return "出生日期不合法";
            if (notNull(s.getAge()) && s.getBirthday().plusYears(s.getAge()).getYear() != LocalDate.now().getYear()) {
                return "年龄与出生日期不匹配";
            }
        }
        if (notNull(s.getOutlook()) && !isValidOutlook(s.getOutlook())) {
            return "政治面貌不合法";
        }
        if (notNull(s.getAddress()) && !isValidAddress(s.getAddress())) {
            return "家庭住址不合法";
        }
        if (notNull(s.getPhone()) && !isValidPhone(s.getPhone())) {
            return "电话号码不合法";
        }
        return null;
    }

    /**
     判断学生记录是否能更新
     - 学号非空且存在, 其余均可为空

     @return 非法信息, 如果合法返回null
     */
    public static String studentUpdateValid(Student s) {
        if (isNull(s.getId())) {
            return "学号不能为空";
        }
        if (!isValidId(s.getId())) {
            return "学号不合法";
        }
        if (!isExistId(s.getId())) {
            return "学号不存在";
        }
        if (notNull(s.getName()) && !isValidName(s.getName())) {
            return "姓名不合法";
        }
        if (notNull(s.getDept()) && !isValidDept(s.getDept())) {
            return "专业不合法";
        }
        if (notNull(s.getClassName())) {
            if (!isValidClassName(s.getClassName())) return "班级不合法";
            if (isNull(s.getDept())) return "需填写专业";
            if (!s.getClassName().startsWith(s.getDept())) return "专业不匹配";
        }
        if (notNull(s.getAge()) && !isValidAge(s.getAge())) {
            return "年龄不合法";
        }
        if (notNull(s.getSex()) && !isValidSex(s.getSex())) {
            return "性别不合法";
        }
        if (notNull(s.getNativePlace()) && !isValidNativePlace(s.getNativePlace())) {
            return "籍贯不合法";
        }
        if (notNull(s.getEmail()) && !isValidEmail(s.getEmail())) {
            return "邮箱不合法";
        }
        if (notNull(s.getBirthday())) {
            if (!isValidBirthday(s.getBirthday())) return "出生日期不合法";
            if (notNull(s.getAge()) && s.getBirthday().plusYears(s.getAge()).getYear() != LocalDate.now().getYear()) {
                return "年龄与出生日期不匹配";
            }
        }
        if (notNull(s.getOutlook()) && !isValidOutlook(s.getOutlook())) {
            return "政治面貌不合法";
        }
        if (notNull(s.getAddress()) && !isValidAddress(s.getAddress())) {
            return "家庭住址不合法";
        }
        if (notNull(s.getPhone()) && !isValidPhone(s.getPhone())) {
            return "电话号码不合法";
        }
        return null;
    }


    /**
     合法id, 10位数字
     */
    public static boolean isValidId(String id) {
        return CheckUtil.notNull(id) && id.matches("\\d{10}");
    }

    /**
     数据库中是否存在该id
     */
    public static boolean isExistId(String id) {
        if (!isValidId(id)) return false;
        for (Student student : StudentService.findAllStudent()) {
            if (student.getId().equals(id)) return true;
        }
        return false;
    }

    /**
     合法姓名, [2,4]位数字
     */
    public static boolean isValidName(String name) {
        return CheckUtil.notNull(name) && name.matches("^[\\u4e00-\\u9fa5]{2,4}$");
    }

    /**
     合法专业, [2,10]位中文字符
     */
    public static boolean isValidDept(String dept) {
        return CheckUtil.notNull(dept) && dept.matches("^[\\u4e00-\\u9fa5]{2,10}$");
    }

    /**
     合法班级, 3位数字 + '班'
     */
    public static boolean isValidClassName(String className) {
        return CheckUtil.notNull(className) && className.matches("[\\u4e00-\\u9fa5]+^\\d{3}班$");
    }

    /**
     合法年龄, 0~100
     */
    public static boolean isValidAge(Integer age) {
        return CheckUtil.notNull(age) && 0 <= age && age <= 100;
    }

    /**
     合法年龄, 0~100
     */
    public static boolean isValidAge(String age) {
        return CheckUtil.notNull(age) && age.length() <= 3 && isValidAge(Integer.parseInt(age));
    }

    /**
     合法性别, 男|女
     */
    public static boolean isValidSex(String sex) {
        return CheckUtil.notNull(sex) && (sex.equals("男") || sex.equals("女"));
    }

    /**
     合法籍贯, [2,10]位中文字符
     */
    public static boolean isValidNativePlace(String nativePlace) {
        return CheckUtil.notNull(nativePlace) &&
                nativePlace.matches("^[\\u4e00-\\u9fa5]{2,10}$");
    }

    /**
     合法邮箱,  用户名 + '@' + 域名
     */
    public static boolean isValidEmail(String email) {
        return CheckUtil.notNull(email) &&
                email.matches("^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$");
    }

    /**
     合法出生日期, 在现在之前
     */
    public static boolean isValidBirthday(LocalDate birthday) {
        return CheckUtil.notNull(birthday) &&
                birthday.isBefore(LocalDate.now());
    }

    /**
     合法政治面貌, 党员|共青团员|群众
     */
    public static boolean isValidOutlook(String outlook) {
        return CheckUtil.notNull(outlook) &&
                (outlook.equals("党员") || outlook.equals("共青团员") || outlook.equals("群众"));
    }

    /**
     合法家庭住址, [2,50]位合法字符
     */
    public static boolean isValidAddress(String address) {
        return CheckUtil.notNull(address) &&
                address.matches("^[\\u4e00-\\u9fa5a-zA-Z0-9]{2,50}$");
    }

    /**
     合法手机号, 以1开始的11位数字
     */
    public static boolean isValidPhone(String phone) {
        return CheckUtil.notNull(phone) &&
                phone.matches("^1\\d{10}$");
    }


}

package com.jjdx.studentmanage.Util;

/**
 类工具

 @ Author: 绝迹的星 <br>
 @ Time: 2024/5/7 <br> */
public class ClassUtil {
    public static <T, U> boolean isInstanceOf(T obj, Class<U> clazz) {
        return clazz.isInstance(obj);//null->false
    }
}

package com.jjdx.studentmanage.Util;

import com.jjdx.studentmanage.pojo.Student;
import javafx.collections.ObservableList;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;

/**
 Excel交互

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/2 <br> */
public class ExcelUtil {

    private ExcelUtil() {// 无实例
    }

    /**
     保存表信息到excel

     @param tableView    表
     @param file         保存位置
     @param skipFirstCOl 第一列是否需要导出
     */
    public static void save(TableView tableView, File file, boolean skipFirstCOl) throws IOException {
        Workbook workbook = new XSSFWorkbook();// 创建工作文件
        Sheet sheet = workbook.createSheet(file.getName());// 建表
        int offset = skipFirstCOl ? 1 : 0;// 是否跳过第一列
        ObservableList<TableColumn> columns = tableView.getColumns();// 从TableView中获取列
        // 创建标题行
        Row sheetHeadRow = sheet.createRow(0);
        for (int i = offset; i < columns.size(); i++) {// 创建标题行
            String columnName = columns.get(i).getText();// 列名
            sheetHeadRow.createCell(i - offset).setCellValue(columnName);
        }
        // 设置数据行
        int rowIndex = 1;// 行索引, 第一行为标题行
        for (Object tableRow : tableView.getItems()) {
            Row sheetDataRow = sheet.createRow(rowIndex++);
            for (int i = offset; i < columns.size(); i++) {
                String tableCellData = columns.get(i).getCellData(tableRow).toString();// 数据
                sheetDataRow.createCell(i - offset).setCellValue(tableCellData);// 设置单元格数据
            }
            try (FileOutputStream fos = new FileOutputStream(file)) {
                workbook.write(fos);
            }
        }
        workbook.close();
    }

    /**
     加载excel文件

     @param file excel文件, 格式若不正确则抛出异常
     */
    public static List<Student> loadInfo(@NotNull File file) throws IOException {
        if (!file.exists() || !file.getName().endsWith("xlsx")) {
            throw new IllegalArgumentException("文件格式不正确");
        }
        List<Student> students = new ArrayList<>();
        Workbook workbook = new XSSFWorkbook(new FileInputStream(file));
        Sheet sheet = workbook.getSheetAt(0);
        Row sheetHead = sheet.getRow(0);

        int numCols = sheetHead.getLastCellNum(); // 总行数
        int numRows = sheet.getLastRowNum();// 总列数

        for (int i = 1; i <= numRows; i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;
            Student student = createStudent(numCols, row, sheetHead);
            students.add(student);
        }
        workbook.close();
        return students;
    }

    /**
     从行中创建一个学生对象
     */
    private static Student createStudent(int numCols, Row row, Row headerRow) {
        Student student = new Student();
        for (int i = 0; i < numCols; i++) {
            Cell cell = row.getCell(i);
            if (cell == null) continue;
            String value = cell.getStringCellValue();
            switch (headerRow.getCell(i).getStringCellValue()) {
                // 注意事项: 配置文件中的字段 = excel表的列名 = case项
                case "学号" -> student.setId(value);
                case "姓名" -> student.setName(value);
                case "专业" -> student.setDept(value);
                case "班级" -> student.setClassName(value);
                case "年龄" -> student.setAge(Integer.parseInt(value));
                case "性别" -> student.setSex(value);
                case "籍贯" -> student.setNativePlace(value);
                case "邮箱" -> student.setEmail(value);
                case "出生日期" -> student.setBirthday(cell.getDateCellValue().toInstant()
                        .atZone(ZoneId.systemDefault()).toLocalDate());
                case "政治面貌" -> student.setOutlook(value);
                case "家庭住址" -> student.setAddress(value);
                case "电话号码" -> student.setPhone(value);
            }
        }
        return student;
    }

}

package com.jjdx.studentmanage.Util;

import javafx.collections.ObservableList;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.control.Tooltip;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.IOException;
import java.net.URL;
import java.util.Objects;

/**
 窗口工具

 @ Author: 绝迹的星 <br>
 @ Time: 2024/7/2 <br> */
public class StageUtil {
    /**
     添加图标

     @param clazz 当前类
     @param stage 当前窗口
     @param name  图片名称
     */
    public static void addIcon(Class clazz, Stage stage, String name) {
        try {
            URL insertUrl = clazz.getResource(name);
            stage.getIcons().add(new Image(Objects.requireNonNull(insertUrl).toString()));
        } catch (Exception ignored) {// 图标加载不出来就算了
        }
    }

/**
 加载页面, 如果已加载则直接返回null

 @param clazz    当前类
 @param xmlPath  页面路径
 @param stage    当前窗口
 @param title    窗口标题
 @param iconPath 图标路径
 */
public static FXMLLoader loadStage(Class clazz, String xmlPath, Stage stage, String title, String iconPath) throws IOException {
    if (stage.isShowing()) {// 已在展示, 防止多开
        stage.requestFocus();
        return null;
    }
    try {// 尝试加载图标
        stage.getIcons().add(new Image(String.valueOf(clazz.getResource(iconPath))));
    } catch (Exception e) {
        e.printStackTrace();
    }
    // 加载UI
    FXMLLoader loader = new FXMLLoader(clazz.getResource(xmlPath));
    Parent root = loader.load();
    Scene scene = new Scene(root);
    stage.setScene(scene);
    stage.setTitle(title);
    stage.show();
    return loader;// 将loader返回出去
}

    /**
     添加提示弹窗
     */
    public static void addTip(TextField node, String tip) {
        Tooltip tooltip = new Tooltip(tip);
        tooltip.setShowDelay(Duration.millis(0));
        tooltip.setHideDelay(Duration.millis(0));
        node.setTooltip(tooltip);
    }

    /**
     设置聚焦函数, 聚焦后取消聚焦

     @param root 根节点
     @param need 需要加的类型
     */
    public static void initFocus(Pane root, Class... need) {
        root.getChildren().forEach(node -> initFocus(root, node, need));
    }

    private static void initFocus(Pane root, Node node, Class... need) {
        // 是需要加的类型
        for (Class clazz : need) {
            if (ClassUtil.isInstanceOf(node, clazz)) {
                node.setOnMouseClicked(event -> root.requestFocus());
                return;
            }
        }
        // 尝试转换为容器类型进行递归
        try {
            ObservableList<Node> children = ((Pane) node).getChildren();
            children.forEach(child -> initFocus(root, child, need));
        } catch (Exception ignored) {
        }
    }

    /**
     透明按钮
     */
    public static Button createTransparentButton(int width, int height, Image image, String text) {
        Button button = new Button();
        button.setStyle("-fx-background-color: transparent");
        button.setPrefWidth(width);
        button.setPrefHeight(height);
        if (image == null) {
            button.setText(text);
        } else {
            ImageView imageView = new ImageView(image);
            imageView.setFitWidth(width);
            imageView.setFitHeight(height);
            button.setGraphic(imageView);
        }
        button.setOpacity(0);
        return button;
    }
}

package com.jjdx.studentmanage.Util;

import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;

import java.io.FileInputStream;
import java.io.FileWriter;
import java.util.HashMap;

/**
 Yaml配置文件的读取器, (需要在程序启动前加载信息)

 @ Author: 绝迹的星 <br>
 @ Time: 2024/5/7 <br> */
public class YamlUtil {
    private static HashMap<String, Object> yMap = new HashMap<>();//从配置文件读取的信息
    private static String configFile = "app-config.yml";// 配置文件的文件名
    private static final Yaml yaml;

    static {
        DumperOptions options = new DumperOptions();
        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);// 块式写入
        options.setPrettyFlow(true);
        yaml = new Yaml(options);
    }

    private YamlUtil() {// 无实例
    }

    /**
     项目启动, 读取配置文件, 若无法读取,则强制停止程序运行
     */
    public static void start() {
        yMap = reLoad();
        if (yMap != null) return;
        System.out.println("配置文件加载失败, 尝试读取备份");
        configFile = "app-config-备份.yml";
        yMap = reLoad();
        if (yMap == null) {
            throw new NullPointerException("备份文件加载失败, 请检查文件");
        }
        try {
            FileWriter output = new FileWriter("app-config.yml");
            yaml.dump(yMap, output);
            configFile = "app-config.yml";
        } catch (Exception e) {
            System.out.println("备份文件读回失败 -- " + e.getMessage());
        }

    }

    /**
     重新加载配置文件, 由于实现实时更新的效果, 所以每次都需要重新读入配置文件

     @return 配置文件中的信息
     */
    private static HashMap<String, Object> reLoad() {
        try {
            return yaml.load(new FileInputStream(configFile));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     分隔获取最后一个HashMap
     - 返回的HashMap是可修改的, 不允许外界访问该方法
     @param split 键名
     @return 最后一个HashMap, 若不存在则返回null
     */
    private static HashMap<String, Object> split(String[] split) {
        HashMap<String, Object> m = new HashMap<>(yMap);
        int n = split.length;
        for (int i = 0; i < n - 1; i++) {
            if (!m.containsKey(split[i])) return null;
            Object o = m.get(split[i]);
            if (!(o instanceof HashMap)) return null;
            m = (HashMap<String, Object>) o;
        }
        return m;
    }

    /**
     获取配置文件的值

     @param name 以"."分隔的键名
     @return 不存在键时返回默认值
     */
    public static <T> T get(String name, T defaultValue) {
        reLoad();
        String[] split = name.split("\\.");
        HashMap<String, Object> lastMap = split(split);
        if (lastMap == null) return defaultValue;
        Object value = lastMap.get(split[split.length - 1]);
        if (!ClassUtil.isInstanceOf(value, defaultValue.getClass())) {
            return defaultValue;
        }
        return (T) value;
    }


    /**
     获取配置文件的int值

     @param name 以"."分隔的键名
     @return 值, 若不存在则返回默认值0
     */
    public static int getInt(String name) {
        reLoad();
        return getInt(name, 0);
    }
    /**
     获取配置文件的int值
     @param name 以"."分隔的键名
     @param defaultVal 不存在则返回默认值
     */
    public static int getInt(String name, int defaultVal) {
        reLoad();
        String[] split = name.split("\\.");
        HashMap<String, Object> lastMap = split(split);
        if (lastMap == null) return defaultVal;
        Object value = lastMap.get(split[split.length - 1]);
        if (!ClassUtil.isInstanceOf(value, Integer.class)) {
            return defaultVal;
        }
        return (int) value;

    }
    /**
     获取配置文件的String值
     @param name 以"."分隔的键名
     @return 不存在则返回默认值""
     */
    public static String getString(String name) {
        return getString(name, "");
    }
    /**
     获取配置文件的String值
     @param name 以"."分隔的键名
     @param defaultVal 不存在则返回默认值
     */
    public static String getString(String name, String defaultVal) {
        reLoad();
        String[] split = name.split("\\.");
        HashMap<String, Object> lastMap = split(split);
        if (lastMap == null) return defaultVal;
        Object value = lastMap.get(split[split.length - 1]);
        if (!ClassUtil.isInstanceOf(value, String.class)) {
            return defaultVal;
        }
        return (String) value;
    }

    /**
     获取配置文件的boolean值
     @param name 以"."分隔的键名
     @return 不存在则返回false
     */
    public static boolean getBoolean(String name) {
        reLoad();
        String[] split = name.split("\\.");
        HashMap<String, Object> lastMap = split(split);
        if (lastMap == null) return false;
        Object value = lastMap.get(split[split.length - 1]);
        if (!ClassUtil.isInstanceOf(value, Boolean.class)) {
            return false;
        }
        return (boolean) value;
    }

    /**
     更改配置文件

     @param name  以"."分隔的键名, 必须存在才能更改
     @param value 新值
     */
    public static void change(String name, Object value) {
        reLoad();
        //获取最后一个map
        String[] split = name.split("\\.");
        HashMap<String, Object> lastMap = split(split);
        if (lastMap == null) return;
        //设置值
        lastMap.put(split[split.length - 1], value);
        try {
            FileWriter output = new FileWriter(configFile);
            yaml.dump(yMap, output);
        } catch (Exception e) {
            System.out.println("配置文件更改失败 -- " + e.getMessage());
        }
    }

    /**
     获取最后一个层级对应的HashMap

     @param name 以"."分隔的键名, 应当以"."或".null"结尾,表示层级终止
     @return 只读数据
     */
    public static HashMap<String, Object> getLastMap(String name) {
        reLoad();
        if (!(name.endsWith(".") || name.endsWith(".null"))) name += ".null";
        String[] split = name.split("\\.");
        HashMap<String, Object> lastMap = split(split);
        if (lastMap == null) return null;
        return new HashMap<>(lastMap);
    }

}
